// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v5.26.1
// source: link.proto

package link

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	_ "voacap/internal/voacap/biz/model/api"
	common "voacap/internal/voacap/biz/model/common"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetLinksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLinksRequest) Reset() {
	*x = GetLinksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLinksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLinksRequest) ProtoMessage() {}

func (x *GetLinksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLinksRequest.ProtoReflect.Descriptor instead.
func (*GetLinksRequest) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{0}
}

type GetLinksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty" form:"code" query:"code"`
	Msg  string         `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty" form:"msg" query:"msg"`
	Data []*common.Link `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" form:"data" query:"data"`
}

func (x *GetLinksResponse) Reset() {
	*x = GetLinksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLinksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLinksResponse) ProtoMessage() {}

func (x *GetLinksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLinksResponse.ProtoReflect.Descriptor instead.
func (*GetLinksResponse) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{1}
}

func (x *GetLinksResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetLinksResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetLinksResponse) GetData() []*common.Link {
	if x != nil {
		return x.Data
	}
	return nil
}

type AddLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SysConfig       *common.SysConfig              `protobuf:"bytes,1,opt,name=sysConfig,proto3" json:"sysConfig,omitempty" form:"sysConfig" query:"sysConfig"`
	TransStation    *common.InterferOrTransStation `protobuf:"bytes,2,opt,name=transStation,proto3" json:"transStation,omitempty" form:"transStation" query:"transStation"`
	RecvStation     *common.RecvStation            `protobuf:"bytes,3,opt,name=recvStation,proto3" json:"recvStation,omitempty" form:"recvStation" query:"recvStation"`
	InterferStation *common.InterferOrTransStation `protobuf:"bytes,4,opt,name=interferStation,proto3" json:"interferStation,omitempty" form:"interferStation" query:"interferStation"`
}

func (x *AddLinkRequest) Reset() {
	*x = AddLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLinkRequest) ProtoMessage() {}

func (x *AddLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLinkRequest.ProtoReflect.Descriptor instead.
func (*AddLinkRequest) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{2}
}

func (x *AddLinkRequest) GetSysConfig() *common.SysConfig {
	if x != nil {
		return x.SysConfig
	}
	return nil
}

func (x *AddLinkRequest) GetTransStation() *common.InterferOrTransStation {
	if x != nil {
		return x.TransStation
	}
	return nil
}

func (x *AddLinkRequest) GetRecvStation() *common.RecvStation {
	if x != nil {
		return x.RecvStation
	}
	return nil
}

func (x *AddLinkRequest) GetInterferStation() *common.InterferOrTransStation {
	if x != nil {
		return x.InterferStation
	}
	return nil
}

type AddLinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty" form:"code" query:"code"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty" form:"msg" query:"msg"`
}

func (x *AddLinkResponse) Reset() {
	*x = AddLinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLinkResponse) ProtoMessage() {}

func (x *AddLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLinkResponse.ProtoReflect.Descriptor instead.
func (*AddLinkResponse) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{3}
}

func (x *AddLinkResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddLinkResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type UpdateLinkByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CircuitReliability float64 `protobuf:"fixed64,1,opt,name=circuitReliability,proto3" json:"circuitReliability,omitempty" form:"circuitReliability" query:"circuitReliability"`
	Coefficient        string  `protobuf:"bytes,2,opt,name=coefficient,proto3" json:"coefficient,omitempty" form:"coefficient" query:"coefficient"`
	Date               string  `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty" form:"date" query:"date"`
	IxAntennaFbandMax  int64   `protobuf:"varint,4,opt,name=ixAntennaFbandMax,proto3" json:"ixAntennaFbandMax,omitempty" form:"ixAntennaFbandMax" query:"ixAntennaFbandMax"`
	IxAntennaFbandMin  int64   `protobuf:"varint,5,opt,name=ixAntennaFbandMin,proto3" json:"ixAntennaFbandMin,omitempty" form:"ixAntennaFbandMin" query:"ixAntennaFbandMin"`
	IxAntennaFile      string  `protobuf:"bytes,6,opt,name=ixAntennaFile,proto3" json:"ixAntennaFile,omitempty" form:"ixAntennaFile" query:"ixAntennaFile"`
	IxAntennaID        int64   `protobuf:"varint,7,opt,name=ixAntennaID,proto3" json:"ixAntennaID,omitempty" form:"ixAntennaID" query:"ixAntennaID"`
	IxAntennaName      string  `protobuf:"bytes,8,opt,name=ixAntennaName,proto3" json:"ixAntennaName,omitempty" form:"ixAntennaName" query:"ixAntennaName"`
	IxPower            float64 `protobuf:"fixed64,9,opt,name=ixPower,proto3" json:"ixPower,omitempty" form:"ixPower" query:"ixPower"`
	IxStationID        int64   `protobuf:"varint,10,opt,name=ixStationID,proto3" json:"ixStationID,omitempty" form:"ixStationID" query:"ixStationID"`
	IxStationLat       float64 `protobuf:"fixed64,11,opt,name=ixStationLat,proto3" json:"ixStationLat,omitempty" form:"ixStationLat" query:"ixStationLat"`
	IxStationLng       float64 `protobuf:"fixed64,12,opt,name=ixStationLng,proto3" json:"ixStationLng,omitempty" form:"ixStationLng" query:"ixStationLng"`
	IxStationName      string  `protobuf:"bytes,13,opt,name=ixStationName,proto3" json:"ixStationName,omitempty" form:"ixStationName" query:"ixStationName"`
	LinkID             int64   `protobuf:"varint,14,opt,name=linkID,proto3" json:"linkID,omitempty" form:"linkID" query:"linkID"`
	LinkType           string  `protobuf:"bytes,15,opt,name=linkType,proto3" json:"linkType,omitempty" form:"linkType" query:"linkType"`
	Noise              float64 `protobuf:"fixed64,16,opt,name=noise,proto3" json:"noise,omitempty" form:"noise" query:"noise" vd:"$ >= 100 && $ <= 150"`
	RxAntennaFbandMax  int64   `protobuf:"varint,17,opt,name=rxAntennaFbandMax,proto3" json:"rxAntennaFbandMax,omitempty" form:"rxAntennaFbandMax" query:"rxAntennaFbandMax"`
	RxAntennaFbandMin  int64   `protobuf:"varint,18,opt,name=rxAntennaFbandMin,proto3" json:"rxAntennaFbandMin,omitempty" form:"rxAntennaFbandMin" query:"rxAntennaFbandMin"`
	RxAntennaFile      string  `protobuf:"bytes,19,opt,name=rxAntennaFile,proto3" json:"rxAntennaFile,omitempty" form:"rxAntennaFile" query:"rxAntennaFile"`
	RxAntennaID        int64   `protobuf:"varint,20,opt,name=rxAntennaID,proto3" json:"rxAntennaID,omitempty" form:"rxAntennaID" query:"rxAntennaID"`
	RxAntennaName      string  `protobuf:"bytes,21,opt,name=rxAntennaName,proto3" json:"rxAntennaName,omitempty" form:"rxAntennaName" query:"rxAntennaName"`
	RxStationID        int64   `protobuf:"varint,22,opt,name=rxStationID,proto3" json:"rxStationID,omitempty" form:"rxStationID" query:"rxStationID"`
	RxStationLat       float64 `protobuf:"fixed64,23,opt,name=rxStationLat,proto3" json:"rxStationLat,omitempty" form:"rxStationLat" query:"rxStationLat"`
	RxStationLng       float64 `protobuf:"fixed64,24,opt,name=rxStationLng,proto3" json:"rxStationLng,omitempty" form:"rxStationLng" query:"rxStationLng"`
	RxStationName      string  `protobuf:"bytes,25,opt,name=rxStationName,proto3" json:"rxStationName,omitempty" form:"rxStationName" query:"rxStationName"`
	SNR                float64 `protobuf:"fixed64,26,opt,name=SNR,proto3" json:"SNR,omitempty" form:"SNR" query:"SNR" vd:"$ >= 1 && $ <= 12"`
	SunspotNum         int64   `protobuf:"varint,27,opt,name=sunspotNum,proto3" json:"sunspotNum,omitempty" form:"sunspotNum" query:"sunspotNum"`
	TimeType           string  `protobuf:"bytes,28,opt,name=timeType,proto3" json:"timeType,omitempty" form:"timeType" query:"timeType"`
	TxAntennaFbandMax  int64   `protobuf:"varint,29,opt,name=txAntennaFbandMax,proto3" json:"txAntennaFbandMax,omitempty" form:"txAntennaFbandMax" query:"txAntennaFbandMax"`
	TxAntennaFbandMin  int64   `protobuf:"varint,30,opt,name=txAntennaFbandMin,proto3" json:"txAntennaFbandMin,omitempty" form:"txAntennaFbandMin" query:"txAntennaFbandMin"`
	TxAntennaFile      string  `protobuf:"bytes,31,opt,name=txAntennaFile,proto3" json:"txAntennaFile,omitempty" form:"txAntennaFile" query:"txAntennaFile"`
	TxAntennaID        int64   `protobuf:"varint,32,opt,name=txAntennaID,proto3" json:"txAntennaID,omitempty" form:"txAntennaID" query:"txAntennaID"`
	TxAntennaName      string  `protobuf:"bytes,33,opt,name=txAntennaName,proto3" json:"txAntennaName,omitempty" form:"txAntennaName" query:"txAntennaName"`
	TxPower            float64 `protobuf:"fixed64,34,opt,name=txPower,proto3" json:"txPower,omitempty" form:"txPower" query:"txPower"`
	TxStationID        int64   `protobuf:"varint,35,opt,name=txStationID,proto3" json:"txStationID,omitempty" form:"txStationID" query:"txStationID"`
	TxStationLat       float64 `protobuf:"fixed64,36,opt,name=txStationLat,proto3" json:"txStationLat,omitempty" form:"txStationLat" query:"txStationLat"`
	TxStationLng       float64 `protobuf:"fixed64,37,opt,name=txStationLng,proto3" json:"txStationLng,omitempty" form:"txStationLng" query:"txStationLng"`
	TxStationName      string  `protobuf:"bytes,38,opt,name=txStationName,proto3" json:"txStationName,omitempty" form:"txStationName" query:"txStationName"`
}

func (x *UpdateLinkByIdRequest) Reset() {
	*x = UpdateLinkByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLinkByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLinkByIdRequest) ProtoMessage() {}

func (x *UpdateLinkByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLinkByIdRequest.ProtoReflect.Descriptor instead.
func (*UpdateLinkByIdRequest) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateLinkByIdRequest) GetCircuitReliability() float64 {
	if x != nil {
		return x.CircuitReliability
	}
	return 0
}

func (x *UpdateLinkByIdRequest) GetCoefficient() string {
	if x != nil {
		return x.Coefficient
	}
	return ""
}

func (x *UpdateLinkByIdRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *UpdateLinkByIdRequest) GetIxAntennaFbandMax() int64 {
	if x != nil {
		return x.IxAntennaFbandMax
	}
	return 0
}

func (x *UpdateLinkByIdRequest) GetIxAntennaFbandMin() int64 {
	if x != nil {
		return x.IxAntennaFbandMin
	}
	return 0
}

func (x *UpdateLinkByIdRequest) GetIxAntennaFile() string {
	if x != nil {
		return x.IxAntennaFile
	}
	return ""
}

func (x *UpdateLinkByIdRequest) GetIxAntennaID() int64 {
	if x != nil {
		return x.IxAntennaID
	}
	return 0
}

func (x *UpdateLinkByIdRequest) GetIxAntennaName() string {
	if x != nil {
		return x.IxAntennaName
	}
	return ""
}

func (x *UpdateLinkByIdRequest) GetIxPower() float64 {
	if x != nil {
		return x.IxPower
	}
	return 0
}

func (x *UpdateLinkByIdRequest) GetIxStationID() int64 {
	if x != nil {
		return x.IxStationID
	}
	return 0
}

func (x *UpdateLinkByIdRequest) GetIxStationLat() float64 {
	if x != nil {
		return x.IxStationLat
	}
	return 0
}

func (x *UpdateLinkByIdRequest) GetIxStationLng() float64 {
	if x != nil {
		return x.IxStationLng
	}
	return 0
}

func (x *UpdateLinkByIdRequest) GetIxStationName() string {
	if x != nil {
		return x.IxStationName
	}
	return ""
}

func (x *UpdateLinkByIdRequest) GetLinkID() int64 {
	if x != nil {
		return x.LinkID
	}
	return 0
}

func (x *UpdateLinkByIdRequest) GetLinkType() string {
	if x != nil {
		return x.LinkType
	}
	return ""
}

func (x *UpdateLinkByIdRequest) GetNoise() float64 {
	if x != nil {
		return x.Noise
	}
	return 0
}

func (x *UpdateLinkByIdRequest) GetRxAntennaFbandMax() int64 {
	if x != nil {
		return x.RxAntennaFbandMax
	}
	return 0
}

func (x *UpdateLinkByIdRequest) GetRxAntennaFbandMin() int64 {
	if x != nil {
		return x.RxAntennaFbandMin
	}
	return 0
}

func (x *UpdateLinkByIdRequest) GetRxAntennaFile() string {
	if x != nil {
		return x.RxAntennaFile
	}
	return ""
}

func (x *UpdateLinkByIdRequest) GetRxAntennaID() int64 {
	if x != nil {
		return x.RxAntennaID
	}
	return 0
}

func (x *UpdateLinkByIdRequest) GetRxAntennaName() string {
	if x != nil {
		return x.RxAntennaName
	}
	return ""
}

func (x *UpdateLinkByIdRequest) GetRxStationID() int64 {
	if x != nil {
		return x.RxStationID
	}
	return 0
}

func (x *UpdateLinkByIdRequest) GetRxStationLat() float64 {
	if x != nil {
		return x.RxStationLat
	}
	return 0
}

func (x *UpdateLinkByIdRequest) GetRxStationLng() float64 {
	if x != nil {
		return x.RxStationLng
	}
	return 0
}

func (x *UpdateLinkByIdRequest) GetRxStationName() string {
	if x != nil {
		return x.RxStationName
	}
	return ""
}

func (x *UpdateLinkByIdRequest) GetSNR() float64 {
	if x != nil {
		return x.SNR
	}
	return 0
}

func (x *UpdateLinkByIdRequest) GetSunspotNum() int64 {
	if x != nil {
		return x.SunspotNum
	}
	return 0
}

func (x *UpdateLinkByIdRequest) GetTimeType() string {
	if x != nil {
		return x.TimeType
	}
	return ""
}

func (x *UpdateLinkByIdRequest) GetTxAntennaFbandMax() int64 {
	if x != nil {
		return x.TxAntennaFbandMax
	}
	return 0
}

func (x *UpdateLinkByIdRequest) GetTxAntennaFbandMin() int64 {
	if x != nil {
		return x.TxAntennaFbandMin
	}
	return 0
}

func (x *UpdateLinkByIdRequest) GetTxAntennaFile() string {
	if x != nil {
		return x.TxAntennaFile
	}
	return ""
}

func (x *UpdateLinkByIdRequest) GetTxAntennaID() int64 {
	if x != nil {
		return x.TxAntennaID
	}
	return 0
}

func (x *UpdateLinkByIdRequest) GetTxAntennaName() string {
	if x != nil {
		return x.TxAntennaName
	}
	return ""
}

func (x *UpdateLinkByIdRequest) GetTxPower() float64 {
	if x != nil {
		return x.TxPower
	}
	return 0
}

func (x *UpdateLinkByIdRequest) GetTxStationID() int64 {
	if x != nil {
		return x.TxStationID
	}
	return 0
}

func (x *UpdateLinkByIdRequest) GetTxStationLat() float64 {
	if x != nil {
		return x.TxStationLat
	}
	return 0
}

func (x *UpdateLinkByIdRequest) GetTxStationLng() float64 {
	if x != nil {
		return x.TxStationLng
	}
	return 0
}

func (x *UpdateLinkByIdRequest) GetTxStationName() string {
	if x != nil {
		return x.TxStationName
	}
	return ""
}

type UpdateLinkByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty" form:"code" query:"code"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty" form:"msg" query:"msg"`
}

func (x *UpdateLinkByIdResponse) Reset() {
	*x = UpdateLinkByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLinkByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLinkByIdResponse) ProtoMessage() {}

func (x *UpdateLinkByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLinkByIdResponse.ProtoReflect.Descriptor instead.
func (*UpdateLinkByIdResponse) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateLinkByIdResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateLinkByIdResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type DeleteLinkByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkID int64 `protobuf:"varint,1,opt,name=linkID,proto3" json:"linkID,omitempty" form:"linkID" query:"linkID"`
}

func (x *DeleteLinkByIdRequest) Reset() {
	*x = DeleteLinkByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLinkByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLinkByIdRequest) ProtoMessage() {}

func (x *DeleteLinkByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLinkByIdRequest.ProtoReflect.Descriptor instead.
func (*DeleteLinkByIdRequest) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteLinkByIdRequest) GetLinkID() int64 {
	if x != nil {
		return x.LinkID
	}
	return 0
}

type DeleteLinkByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty" form:"code" query:"code"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty" form:"msg" query:"msg"`
}

func (x *DeleteLinkByIdResponse) Reset() {
	*x = DeleteLinkByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLinkByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLinkByIdResponse) ProtoMessage() {}

func (x *DeleteLinkByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLinkByIdResponse.ProtoReflect.Descriptor instead.
func (*DeleteLinkByIdResponse) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteLinkByIdResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteLinkByIdResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type WriteLink2FileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CircuitReliability float64 `protobuf:"fixed64,1,opt,name=circuitReliability,proto3" json:"circuitReliability,omitempty" form:"circuitReliability" query:"circuitReliability"`
	Coefficient        string  `protobuf:"bytes,2,opt,name=coefficient,proto3" json:"coefficient,omitempty" form:"coefficient" query:"coefficient"`
	Date               string  `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty" form:"date" query:"date"`
	IxAntennaFbandMax  int64   `protobuf:"varint,4,opt,name=ixAntennaFbandMax,proto3" json:"ixAntennaFbandMax,omitempty" form:"ixAntennaFbandMax" query:"ixAntennaFbandMax"`
	IxAntennaFbandMin  int64   `protobuf:"varint,5,opt,name=ixAntennaFbandMin,proto3" json:"ixAntennaFbandMin,omitempty" form:"ixAntennaFbandMin" query:"ixAntennaFbandMin"`
	IxAntennaFile      string  `protobuf:"bytes,6,opt,name=ixAntennaFile,proto3" json:"ixAntennaFile,omitempty" form:"ixAntennaFile" query:"ixAntennaFile"`
	IxAntennaID        int64   `protobuf:"varint,7,opt,name=ixAntennaID,proto3" json:"ixAntennaID,omitempty" form:"ixAntennaID" query:"ixAntennaID"`
	IxAntennaName      string  `protobuf:"bytes,8,opt,name=ixAntennaName,proto3" json:"ixAntennaName,omitempty" form:"ixAntennaName" query:"ixAntennaName"`
	IxPower            float64 `protobuf:"fixed64,9,opt,name=ixPower,proto3" json:"ixPower,omitempty" form:"ixPower" query:"ixPower"`
	IxStationID        int64   `protobuf:"varint,10,opt,name=ixStationID,proto3" json:"ixStationID,omitempty" form:"ixStationID" query:"ixStationID"`
	IxStationLat       float64 `protobuf:"fixed64,11,opt,name=ixStationLat,proto3" json:"ixStationLat,omitempty" form:"ixStationLat" query:"ixStationLat"`
	IxStationLng       float64 `protobuf:"fixed64,12,opt,name=ixStationLng,proto3" json:"ixStationLng,omitempty" form:"ixStationLng" query:"ixStationLng"`
	IxStationName      string  `protobuf:"bytes,13,opt,name=ixStationName,proto3" json:"ixStationName,omitempty" form:"ixStationName" query:"ixStationName"`
	LinkID             int64   `protobuf:"varint,14,opt,name=linkID,proto3" json:"linkID,omitempty" form:"linkID" query:"linkID"`
	LinkType           string  `protobuf:"bytes,15,opt,name=linkType,proto3" json:"linkType,omitempty" form:"linkType" query:"linkType"`
	Noise              float64 `protobuf:"fixed64,16,opt,name=noise,proto3" json:"noise,omitempty" form:"noise" query:"noise" vd:"$ >= 100 && $ <= 150"`
	RxAntennaFbandMax  int64   `protobuf:"varint,17,opt,name=rxAntennaFbandMax,proto3" json:"rxAntennaFbandMax,omitempty" form:"rxAntennaFbandMax" query:"rxAntennaFbandMax"`
	RxAntennaFbandMin  int64   `protobuf:"varint,18,opt,name=rxAntennaFbandMin,proto3" json:"rxAntennaFbandMin,omitempty" form:"rxAntennaFbandMin" query:"rxAntennaFbandMin"`
	RxAntennaFile      string  `protobuf:"bytes,19,opt,name=rxAntennaFile,proto3" json:"rxAntennaFile,omitempty" form:"rxAntennaFile" query:"rxAntennaFile"`
	RxAntennaID        int64   `protobuf:"varint,20,opt,name=rxAntennaID,proto3" json:"rxAntennaID,omitempty" form:"rxAntennaID" query:"rxAntennaID"`
	RxAntennaName      string  `protobuf:"bytes,21,opt,name=rxAntennaName,proto3" json:"rxAntennaName,omitempty" form:"rxAntennaName" query:"rxAntennaName"`
	RxStationID        int64   `protobuf:"varint,22,opt,name=rxStationID,proto3" json:"rxStationID,omitempty" form:"rxStationID" query:"rxStationID"`
	RxStationLat       float64 `protobuf:"fixed64,23,opt,name=rxStationLat,proto3" json:"rxStationLat,omitempty" form:"rxStationLat" query:"rxStationLat"`
	RxStationLng       float64 `protobuf:"fixed64,24,opt,name=rxStationLng,proto3" json:"rxStationLng,omitempty" form:"rxStationLng" query:"rxStationLng"`
	RxStationName      string  `protobuf:"bytes,25,opt,name=rxStationName,proto3" json:"rxStationName,omitempty" form:"rxStationName" query:"rxStationName"`
	SNR                float64 `protobuf:"fixed64,26,opt,name=SNR,proto3" json:"SNR,omitempty" form:"SNR" query:"SNR" vd:"$ >= 1 && $ <= 12"`
	SunspotNum         int64   `protobuf:"varint,27,opt,name=sunspotNum,proto3" json:"sunspotNum,omitempty" form:"sunspotNum" query:"sunspotNum"`
	TimeType           string  `protobuf:"bytes,28,opt,name=timeType,proto3" json:"timeType,omitempty" form:"timeType" query:"timeType"`
	TxAntennaFbandMax  int64   `protobuf:"varint,29,opt,name=txAntennaFbandMax,proto3" json:"txAntennaFbandMax,omitempty" form:"txAntennaFbandMax" query:"txAntennaFbandMax"`
	TxAntennaFbandMin  int64   `protobuf:"varint,30,opt,name=txAntennaFbandMin,proto3" json:"txAntennaFbandMin,omitempty" form:"txAntennaFbandMin" query:"txAntennaFbandMin"`
	TxAntennaFile      string  `protobuf:"bytes,31,opt,name=txAntennaFile,proto3" json:"txAntennaFile,omitempty" form:"txAntennaFile" query:"txAntennaFile"`
	TxAntennaID        int64   `protobuf:"varint,32,opt,name=txAntennaID,proto3" json:"txAntennaID,omitempty" form:"txAntennaID" query:"txAntennaID"`
	TxAntennaName      string  `protobuf:"bytes,33,opt,name=txAntennaName,proto3" json:"txAntennaName,omitempty" form:"txAntennaName" query:"txAntennaName"`
	TxPower            float64 `protobuf:"fixed64,34,opt,name=txPower,proto3" json:"txPower,omitempty" form:"txPower" query:"txPower"`
	TxStationID        int64   `protobuf:"varint,35,opt,name=txStationID,proto3" json:"txStationID,omitempty" form:"txStationID" query:"txStationID"`
	TxStationLat       float64 `protobuf:"fixed64,36,opt,name=txStationLat,proto3" json:"txStationLat,omitempty" form:"txStationLat" query:"txStationLat"`
	TxStationLng       float64 `protobuf:"fixed64,37,opt,name=txStationLng,proto3" json:"txStationLng,omitempty" form:"txStationLng" query:"txStationLng"`
	TxStationName      string  `protobuf:"bytes,38,opt,name=txStationName,proto3" json:"txStationName,omitempty" form:"txStationName" query:"txStationName"`
}

func (x *WriteLink2FileRequest) Reset() {
	*x = WriteLink2FileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteLink2FileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteLink2FileRequest) ProtoMessage() {}

func (x *WriteLink2FileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteLink2FileRequest.ProtoReflect.Descriptor instead.
func (*WriteLink2FileRequest) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{8}
}

func (x *WriteLink2FileRequest) GetCircuitReliability() float64 {
	if x != nil {
		return x.CircuitReliability
	}
	return 0
}

func (x *WriteLink2FileRequest) GetCoefficient() string {
	if x != nil {
		return x.Coefficient
	}
	return ""
}

func (x *WriteLink2FileRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *WriteLink2FileRequest) GetIxAntennaFbandMax() int64 {
	if x != nil {
		return x.IxAntennaFbandMax
	}
	return 0
}

func (x *WriteLink2FileRequest) GetIxAntennaFbandMin() int64 {
	if x != nil {
		return x.IxAntennaFbandMin
	}
	return 0
}

func (x *WriteLink2FileRequest) GetIxAntennaFile() string {
	if x != nil {
		return x.IxAntennaFile
	}
	return ""
}

func (x *WriteLink2FileRequest) GetIxAntennaID() int64 {
	if x != nil {
		return x.IxAntennaID
	}
	return 0
}

func (x *WriteLink2FileRequest) GetIxAntennaName() string {
	if x != nil {
		return x.IxAntennaName
	}
	return ""
}

func (x *WriteLink2FileRequest) GetIxPower() float64 {
	if x != nil {
		return x.IxPower
	}
	return 0
}

func (x *WriteLink2FileRequest) GetIxStationID() int64 {
	if x != nil {
		return x.IxStationID
	}
	return 0
}

func (x *WriteLink2FileRequest) GetIxStationLat() float64 {
	if x != nil {
		return x.IxStationLat
	}
	return 0
}

func (x *WriteLink2FileRequest) GetIxStationLng() float64 {
	if x != nil {
		return x.IxStationLng
	}
	return 0
}

func (x *WriteLink2FileRequest) GetIxStationName() string {
	if x != nil {
		return x.IxStationName
	}
	return ""
}

func (x *WriteLink2FileRequest) GetLinkID() int64 {
	if x != nil {
		return x.LinkID
	}
	return 0
}

func (x *WriteLink2FileRequest) GetLinkType() string {
	if x != nil {
		return x.LinkType
	}
	return ""
}

func (x *WriteLink2FileRequest) GetNoise() float64 {
	if x != nil {
		return x.Noise
	}
	return 0
}

func (x *WriteLink2FileRequest) GetRxAntennaFbandMax() int64 {
	if x != nil {
		return x.RxAntennaFbandMax
	}
	return 0
}

func (x *WriteLink2FileRequest) GetRxAntennaFbandMin() int64 {
	if x != nil {
		return x.RxAntennaFbandMin
	}
	return 0
}

func (x *WriteLink2FileRequest) GetRxAntennaFile() string {
	if x != nil {
		return x.RxAntennaFile
	}
	return ""
}

func (x *WriteLink2FileRequest) GetRxAntennaID() int64 {
	if x != nil {
		return x.RxAntennaID
	}
	return 0
}

func (x *WriteLink2FileRequest) GetRxAntennaName() string {
	if x != nil {
		return x.RxAntennaName
	}
	return ""
}

func (x *WriteLink2FileRequest) GetRxStationID() int64 {
	if x != nil {
		return x.RxStationID
	}
	return 0
}

func (x *WriteLink2FileRequest) GetRxStationLat() float64 {
	if x != nil {
		return x.RxStationLat
	}
	return 0
}

func (x *WriteLink2FileRequest) GetRxStationLng() float64 {
	if x != nil {
		return x.RxStationLng
	}
	return 0
}

func (x *WriteLink2FileRequest) GetRxStationName() string {
	if x != nil {
		return x.RxStationName
	}
	return ""
}

func (x *WriteLink2FileRequest) GetSNR() float64 {
	if x != nil {
		return x.SNR
	}
	return 0
}

func (x *WriteLink2FileRequest) GetSunspotNum() int64 {
	if x != nil {
		return x.SunspotNum
	}
	return 0
}

func (x *WriteLink2FileRequest) GetTimeType() string {
	if x != nil {
		return x.TimeType
	}
	return ""
}

func (x *WriteLink2FileRequest) GetTxAntennaFbandMax() int64 {
	if x != nil {
		return x.TxAntennaFbandMax
	}
	return 0
}

func (x *WriteLink2FileRequest) GetTxAntennaFbandMin() int64 {
	if x != nil {
		return x.TxAntennaFbandMin
	}
	return 0
}

func (x *WriteLink2FileRequest) GetTxAntennaFile() string {
	if x != nil {
		return x.TxAntennaFile
	}
	return ""
}

func (x *WriteLink2FileRequest) GetTxAntennaID() int64 {
	if x != nil {
		return x.TxAntennaID
	}
	return 0
}

func (x *WriteLink2FileRequest) GetTxAntennaName() string {
	if x != nil {
		return x.TxAntennaName
	}
	return ""
}

func (x *WriteLink2FileRequest) GetTxPower() float64 {
	if x != nil {
		return x.TxPower
	}
	return 0
}

func (x *WriteLink2FileRequest) GetTxStationID() int64 {
	if x != nil {
		return x.TxStationID
	}
	return 0
}

func (x *WriteLink2FileRequest) GetTxStationLat() float64 {
	if x != nil {
		return x.TxStationLat
	}
	return 0
}

func (x *WriteLink2FileRequest) GetTxStationLng() float64 {
	if x != nil {
		return x.TxStationLng
	}
	return 0
}

func (x *WriteLink2FileRequest) GetTxStationName() string {
	if x != nil {
		return x.TxStationName
	}
	return ""
}

type CalculateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GMT  float64   `protobuf:"fixed64,1,opt,name=GMT,proto3" json:"GMT,omitempty" form:"GMT" query:"GMT"`
	LMT  float64   `protobuf:"fixed64,2,opt,name=LMT,proto3" json:"LMT,omitempty" form:"LMT" query:"LMT"`
	MUF  float64   `protobuf:"fixed64,3,opt,name=MUF,proto3" json:"MUF,omitempty" form:"MUF" query:"MUF"`
	LUF  float64   `protobuf:"fixed64,4,opt,name=LUF,proto3" json:"LUF,omitempty" form:"LUF" query:"LUF"`
	DBU  []float64 `protobuf:"fixed64,5,rep,packed,name=DBU,proto3" json:"DBU,omitempty" form:"DBU" query:"DBU"`
	SDBW []float64 `protobuf:"fixed64,6,rep,packed,name=SDBW,proto3" json:"SDBW,omitempty" form:"SDBW" query:"SDBW"`
	SNR  []float64 `protobuf:"fixed64,7,rep,packed,name=SNR,proto3" json:"SNR,omitempty" form:"SNR" query:"SNR"`
	FOT  float64   `protobuf:"fixed64,8,opt,name=FOT,proto3" json:"FOT,omitempty" form:"FOT" query:"FOT"`
}

func (x *CalculateResult) Reset() {
	*x = CalculateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateResult) ProtoMessage() {}

func (x *CalculateResult) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateResult.ProtoReflect.Descriptor instead.
func (*CalculateResult) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{9}
}

func (x *CalculateResult) GetGMT() float64 {
	if x != nil {
		return x.GMT
	}
	return 0
}

func (x *CalculateResult) GetLMT() float64 {
	if x != nil {
		return x.LMT
	}
	return 0
}

func (x *CalculateResult) GetMUF() float64 {
	if x != nil {
		return x.MUF
	}
	return 0
}

func (x *CalculateResult) GetLUF() float64 {
	if x != nil {
		return x.LUF
	}
	return 0
}

func (x *CalculateResult) GetDBU() []float64 {
	if x != nil {
		return x.DBU
	}
	return nil
}

func (x *CalculateResult) GetSDBW() []float64 {
	if x != nil {
		return x.SDBW
	}
	return nil
}

func (x *CalculateResult) GetSNR() []float64 {
	if x != nil {
		return x.SNR
	}
	return nil
}

func (x *CalculateResult) GetFOT() float64 {
	if x != nil {
		return x.FOT
	}
	return 0
}

type SIR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GMT float64   `protobuf:"fixed64,1,opt,name=GMT,proto3" json:"GMT,omitempty" form:"GMT" query:"GMT"`
	SIR []float64 `protobuf:"fixed64,2,rep,packed,name=SIR,proto3" json:"SIR,omitempty" form:"SIR" query:"SIR"`
}

func (x *SIR) Reset() {
	*x = SIR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SIR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SIR) ProtoMessage() {}

func (x *SIR) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SIR.ProtoReflect.Descriptor instead.
func (*SIR) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{10}
}

func (x *SIR) GetGMT() float64 {
	if x != nil {
		return x.GMT
	}
	return 0
}

func (x *SIR) GetSIR() []float64 {
	if x != nil {
		return x.SIR
	}
	return nil
}

type WriteLink2FileData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransLink    []*CalculateResult `protobuf:"bytes,3,rep,name=transLink,proto3" json:"transLink,omitempty" form:"transLink" query:"transLink"`
	InterferLink []*CalculateResult `protobuf:"bytes,4,rep,name=interferLink,proto3" json:"interferLink,omitempty" form:"interferLink" query:"interferLink"`
	SIR          []*SIR             `protobuf:"bytes,5,rep,name=SIR,proto3" json:"SIR,omitempty" form:"SIR" query:"SIR"`
}

func (x *WriteLink2FileData) Reset() {
	*x = WriteLink2FileData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteLink2FileData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteLink2FileData) ProtoMessage() {}

func (x *WriteLink2FileData) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteLink2FileData.ProtoReflect.Descriptor instead.
func (*WriteLink2FileData) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{11}
}

func (x *WriteLink2FileData) GetTransLink() []*CalculateResult {
	if x != nil {
		return x.TransLink
	}
	return nil
}

func (x *WriteLink2FileData) GetInterferLink() []*CalculateResult {
	if x != nil {
		return x.InterferLink
	}
	return nil
}

func (x *WriteLink2FileData) GetSIR() []*SIR {
	if x != nil {
		return x.SIR
	}
	return nil
}

type WriteLink2FileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty" form:"code" query:"code"`
	Msg  string              `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty" form:"msg" query:"msg"`
	Data *WriteLink2FileData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty" form:"data" query:"data"`
}

func (x *WriteLink2FileResponse) Reset() {
	*x = WriteLink2FileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_link_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteLink2FileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteLink2FileResponse) ProtoMessage() {}

func (x *WriteLink2FileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_link_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteLink2FileResponse.ProtoReflect.Descriptor instead.
func (*WriteLink2FileResponse) Descriptor() ([]byte, []int) {
	return file_link_proto_rawDescGZIP(), []int{12}
}

func (x *WriteLink2FileResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *WriteLink2FileResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *WriteLink2FileResponse) GetData() *WriteLink2FileData {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_link_proto protoreflect.FileDescriptor

var file_link_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6c, 0x69,
	0x6e, 0x6b, 0x1a, 0x09, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x11, 0x0a, 0x0f, 0x67,
	0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5a,
	0x0a, 0x10, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x20, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x86, 0x02, 0x0a, 0x0e, 0x61,
	0x64, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a,
	0x09, 0x73, 0x79, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x09, 0x73, 0x79, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x42,
	0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x76, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x63, 0x76, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65,
	0x63, 0x76, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x37, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x88, 0x0b, 0x0a,
	0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69,
	0x74, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x52, 0x65, 0x6c, 0x69, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x65,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x69, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x46, 0x62, 0x61, 0x6e, 0x64, 0x4d, 0x61,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x69, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e,
	0x6e, 0x61, 0x46, 0x62, 0x61, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x78,
	0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x46, 0x62, 0x61, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x69, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61,
	0x46, 0x62, 0x61, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x78, 0x41, 0x6e,
	0x74, 0x65, 0x6e, 0x6e, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x69, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x49, 0x44, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x49, 0x44,
	0x12, 0x24, 0x0a, 0x0d, 0x69, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e,
	0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x78, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x69, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x20, 0x0a, 0x0b, 0x69, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x69, 0x78, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x78, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x69, 0x78,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x78,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x69, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x01, 0x42, 0x18, 0xda, 0xbb, 0x18, 0x14, 0x24, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x30,
	0x30, 0x20, 0x26, 0x26, 0x20, 0x24, 0x20, 0x3c, 0x3d, 0x20, 0x31, 0x35, 0x30, 0x52, 0x05, 0x6e,
	0x6f, 0x69, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e,
	0x61, 0x46, 0x62, 0x61, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x72, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x46, 0x62, 0x61, 0x6e, 0x64, 0x4d,
	0x61, 0x78, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x46,
	0x62, 0x61, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x72,
	0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x46, 0x62, 0x61, 0x6e, 0x64, 0x4d, 0x69, 0x6e,
	0x12, 0x24, 0x0a, 0x0d, 0x72, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x46, 0x69, 0x6c,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e,
	0x6e, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x78, 0x41, 0x6e, 0x74, 0x65,
	0x6e, 0x6e, 0x61, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x78, 0x41,
	0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x78, 0x41, 0x6e,
	0x74, 0x65, 0x6e, 0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x72, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x72, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x74,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x61, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x6e, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x78, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x78, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x72, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27,
	0x0a, 0x03, 0x53, 0x4e, 0x52, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x42, 0x15, 0xda, 0xbb, 0x18,
	0x11, 0x24, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x20, 0x26, 0x26, 0x20, 0x24, 0x20, 0x3c, 0x3d, 0x20,
	0x31, 0x32, 0x52, 0x03, 0x53, 0x4e, 0x52, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x6e, 0x73, 0x70,
	0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x75, 0x6e,
	0x73, 0x70, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61,
	0x46, 0x62, 0x61, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x74, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x46, 0x62, 0x61, 0x6e, 0x64, 0x4d, 0x61,
	0x78, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x46, 0x62,
	0x61, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x78,
	0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x46, 0x62, 0x61, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x12,
	0x24, 0x0a, 0x0d, 0x74, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x46, 0x69, 0x6c, 0x65,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e,
	0x61, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e,
	0x6e, 0x61, 0x49, 0x44, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x78, 0x41, 0x6e,
	0x74, 0x65, 0x6e, 0x6e, 0x61, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x78, 0x41, 0x6e, 0x74,
	0x65, 0x6e, 0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x74, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x78, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x78,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x78, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x74, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x74, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6e, 0x67, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6e,
	0x67, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x78, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3e, 0x0a, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x2f, 0x0a, 0x15, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x44, 0x22, 0x3e, 0x0a, 0x16, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x88, 0x0b, 0x0a, 0x15, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x32, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x52, 0x65, 0x6c,
	0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12,
	0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x78, 0x41, 0x6e,
	0x74, 0x65, 0x6e, 0x6e, 0x61, 0x46, 0x62, 0x61, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x69, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x46, 0x62,
	0x61, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x78, 0x41, 0x6e, 0x74, 0x65,
	0x6e, 0x6e, 0x61, 0x46, 0x62, 0x61, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x69, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x46, 0x62, 0x61, 0x6e,
	0x64, 0x4d, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e,
	0x61, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x78, 0x41,
	0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x78,
	0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x69, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d,
	0x69, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x69, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x69, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x69, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x69, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x61, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x69, 0x78, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x78, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69,
	0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x69,
	0x6e, 0x6b, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2e, 0x0a, 0x05, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x42,
	0x18, 0xda, 0xbb, 0x18, 0x14, 0x24, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x30, 0x30, 0x20, 0x26, 0x26,
	0x20, 0x24, 0x20, 0x3c, 0x3d, 0x20, 0x31, 0x35, 0x30, 0x52, 0x05, 0x6e, 0x6f, 0x69, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x72, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x46, 0x62, 0x61,
	0x6e, 0x64, 0x4d, 0x61, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x72, 0x78, 0x41,
	0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x46, 0x62, 0x61, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x12, 0x2c,
	0x0a, 0x11, 0x72, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x46, 0x62, 0x61, 0x6e, 0x64,
	0x4d, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x72, 0x78, 0x41, 0x6e, 0x74,
	0x65, 0x6e, 0x6e, 0x61, 0x46, 0x62, 0x61, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d,
	0x72, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x49,
	0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e,
	0x6e, 0x61, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e,
	0x61, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x78, 0x41,
	0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x78,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x72, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x74, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x72, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6e, 0x67,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x78, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x03, 0x53, 0x4e,
	0x52, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x42, 0x15, 0xda, 0xbb, 0x18, 0x11, 0x24, 0x20, 0x3e,
	0x3d, 0x20, 0x31, 0x20, 0x26, 0x26, 0x20, 0x24, 0x20, 0x3c, 0x3d, 0x20, 0x31, 0x32, 0x52, 0x03,
	0x53, 0x4e, 0x52, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x6e, 0x73, 0x70, 0x6f, 0x74, 0x4e, 0x75,
	0x6d, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x75, 0x6e, 0x73, 0x70, 0x6f, 0x74,
	0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x74, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x46, 0x62, 0x61, 0x6e,
	0x64, 0x4d, 0x61, 0x78, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x78, 0x41, 0x6e,
	0x74, 0x65, 0x6e, 0x6e, 0x61, 0x46, 0x62, 0x61, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x12, 0x2c, 0x0a,
	0x11, 0x74, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x46, 0x62, 0x61, 0x6e, 0x64, 0x4d,
	0x69, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x78, 0x41, 0x6e, 0x74, 0x65,
	0x6e, 0x6e, 0x61, 0x46, 0x62, 0x61, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x74,
	0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x49, 0x44,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e,
	0x61, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x78, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x78, 0x41, 0x6e,
	0x74, 0x65, 0x6e, 0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x78, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x74, 0x78, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x78, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x61, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x78, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x78, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6e, 0x67, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x74, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6e, 0x67, 0x12, 0x24, 0x0a,
	0x0d, 0x74, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x0f, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x47, 0x4d, 0x54, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x47, 0x4d, 0x54, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x4d, 0x54,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x4c, 0x4d, 0x54, 0x12, 0x10, 0x0a, 0x03, 0x4d,
	0x55, 0x46, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x4d, 0x55, 0x46, 0x12, 0x10, 0x0a,
	0x03, 0x4c, 0x55, 0x46, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x4c, 0x55, 0x46, 0x12,
	0x10, 0x0a, 0x03, 0x44, 0x42, 0x55, 0x18, 0x05, 0x20, 0x03, 0x28, 0x01, 0x52, 0x03, 0x44, 0x42,
	0x55, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x44, 0x42, 0x57, 0x18, 0x06, 0x20, 0x03, 0x28, 0x01, 0x52,
	0x04, 0x53, 0x44, 0x42, 0x57, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x4e, 0x52, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x01, 0x52, 0x03, 0x53, 0x4e, 0x52, 0x12, 0x10, 0x0a, 0x03, 0x46, 0x4f, 0x54, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x46, 0x4f, 0x54, 0x22, 0x29, 0x0a, 0x03, 0x53, 0x49, 0x52,
	0x12, 0x10, 0x0a, 0x03, 0x47, 0x4d, 0x54, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x47,
	0x4d, 0x54, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x49, 0x52, 0x18, 0x02, 0x20, 0x03, 0x28, 0x01, 0x52,
	0x03, 0x53, 0x49, 0x52, 0x22, 0xa1, 0x01, 0x0a, 0x12, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x32, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x39, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x03, 0x53,
	0x49, 0x52, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e,
	0x53, 0x49, 0x52, 0x52, 0x03, 0x53, 0x49, 0x52, 0x22, 0x6c, 0x0a, 0x16, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x32, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x32, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xe1, 0x03, 0x0a, 0x0b, 0x4c, 0x69, 0x6e, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e,
	0x6b, 0x73, 0x12, 0x15, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x6e,
	0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6c, 0x69, 0x6e, 0x6b,
	0x2e, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x13, 0xca, 0xc1, 0x18, 0x0f, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x2f, 0x67, 0x65,
	0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x4a, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x4c, 0x69, 0x6e,
	0x6b, 0x12, 0x14, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x61, 0x64, 0x64, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x61,
	0x64, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12,
	0xd2, 0xc1, 0x18, 0x0e, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x4c, 0x69,
	0x6e, 0x6b, 0x12, 0x66, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x42, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x19, 0xd2, 0xc1, 0x18, 0x15, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x2f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x79, 0x49, 0x64, 0x12, 0x66, 0x0a, 0x0e, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x2e, 0x6c,
	0x69, 0x6e, 0x6b, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6c, 0x69, 0x6e, 0x6b,
	0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0xd2, 0xc1, 0x18, 0x15, 0x2f, 0x6c, 0x69,
	0x6e, 0x6b, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x79,
	0x49, 0x64, 0x12, 0x66, 0x0a, 0x0e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x32,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x32, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x32, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x19, 0xd2, 0xc1, 0x18, 0x15, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x2f, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x32, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x27, 0x5a, 0x25, 0x76, 0x6f,
	0x61, 0x63, 0x61, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x76, 0x6f,
	0x61, 0x63, 0x61, 0x70, 0x2f, 0x62, 0x69, 0x7a, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x6c,
	0x69, 0x6e, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_link_proto_rawDescOnce sync.Once
	file_link_proto_rawDescData = file_link_proto_rawDesc
)

func file_link_proto_rawDescGZIP() []byte {
	file_link_proto_rawDescOnce.Do(func() {
		file_link_proto_rawDescData = protoimpl.X.CompressGZIP(file_link_proto_rawDescData)
	})
	return file_link_proto_rawDescData
}

var file_link_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_link_proto_goTypes = []interface{}{
	(*GetLinksRequest)(nil),               // 0: link.getLinksRequest
	(*GetLinksResponse)(nil),              // 1: link.getLinksResponse
	(*AddLinkRequest)(nil),                // 2: link.addLinkRequest
	(*AddLinkResponse)(nil),               // 3: link.addLinkResponse
	(*UpdateLinkByIdRequest)(nil),         // 4: link.updateLinkByIdRequest
	(*UpdateLinkByIdResponse)(nil),        // 5: link.updateLinkByIdResponse
	(*DeleteLinkByIdRequest)(nil),         // 6: link.deleteLinkByIdRequest
	(*DeleteLinkByIdResponse)(nil),        // 7: link.deleteLinkByIdResponse
	(*WriteLink2FileRequest)(nil),         // 8: link.writeLink2FileRequest
	(*CalculateResult)(nil),               // 9: link.CalculateResult
	(*SIR)(nil),                           // 10: link.SIR
	(*WriteLink2FileData)(nil),            // 11: link.writeLink2FileData
	(*WriteLink2FileResponse)(nil),        // 12: link.writeLink2FileResponse
	(*common.Link)(nil),                   // 13: common.Link
	(*common.SysConfig)(nil),              // 14: common.SysConfig
	(*common.InterferOrTransStation)(nil), // 15: common.InterferOrTransStation
	(*common.RecvStation)(nil),            // 16: common.RecvStation
}
var file_link_proto_depIdxs = []int32{
	13, // 0: link.getLinksResponse.data:type_name -> common.Link
	14, // 1: link.addLinkRequest.sysConfig:type_name -> common.SysConfig
	15, // 2: link.addLinkRequest.transStation:type_name -> common.InterferOrTransStation
	16, // 3: link.addLinkRequest.recvStation:type_name -> common.RecvStation
	15, // 4: link.addLinkRequest.interferStation:type_name -> common.InterferOrTransStation
	9,  // 5: link.writeLink2FileData.transLink:type_name -> link.CalculateResult
	9,  // 6: link.writeLink2FileData.interferLink:type_name -> link.CalculateResult
	10, // 7: link.writeLink2FileData.SIR:type_name -> link.SIR
	11, // 8: link.writeLink2FileResponse.data:type_name -> link.writeLink2FileData
	0,  // 9: link.LinkService.GetLinks:input_type -> link.getLinksRequest
	2,  // 10: link.LinkService.AddLink:input_type -> link.addLinkRequest
	4,  // 11: link.LinkService.updateLinkById:input_type -> link.updateLinkByIdRequest
	6,  // 12: link.LinkService.deleteLinkById:input_type -> link.deleteLinkByIdRequest
	8,  // 13: link.LinkService.writeLink2File:input_type -> link.writeLink2FileRequest
	1,  // 14: link.LinkService.GetLinks:output_type -> link.getLinksResponse
	3,  // 15: link.LinkService.AddLink:output_type -> link.addLinkResponse
	5,  // 16: link.LinkService.updateLinkById:output_type -> link.updateLinkByIdResponse
	7,  // 17: link.LinkService.deleteLinkById:output_type -> link.deleteLinkByIdResponse
	12, // 18: link.LinkService.writeLink2File:output_type -> link.writeLink2FileResponse
	14, // [14:19] is the sub-list for method output_type
	9,  // [9:14] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_link_proto_init() }
func file_link_proto_init() {
	if File_link_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_link_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLinksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLinksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddLinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLinkByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLinkByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLinkByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLinkByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteLink2FileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SIR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteLink2FileData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_link_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteLink2FileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_link_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_link_proto_goTypes,
		DependencyIndexes: file_link_proto_depIdxs,
		MessageInfos:      file_link_proto_msgTypes,
	}.Build()
	File_link_proto = out.File
	file_link_proto_rawDesc = nil
	file_link_proto_goTypes = nil
	file_link_proto_depIdxs = nil
}
