// Code generated by hertz generator.

package antennas

import (
	"context"

	"voacap/internal/pkg/utils"
	antennas "voacap/internal/voacap/biz/model/antennas"
	service "voacap/internal/voacap/biz/service/antenna"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// GetAntennas .
// @router /getAntennas [GET]
func GetAntennas(ctx context.Context, c *app.RequestContext) {
	var err error
	var req antennas.GetAntennasRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := utils.BuildBaseResp(err)
		c.JSON(consts.StatusOK, antennas.GetAntennasResponse{
			Code: resp.StatusCode,
			Msg:  resp.StatusMsg,
		})
		return
	}

	data, err := service.NewAntennaService(ctx, c).GetAntennas()

	resp := utils.BuildBaseResp(err)
	c.JSON(consts.StatusOK, antennas.GetAntennasResponse{
		Code: resp.StatusCode,
		Msg:  resp.StatusMsg,
		Data: data,
	})
}

// AddAntenna .
// @router /antennas/addAntenna [POST]
func AddAntenna(ctx context.Context, c *app.RequestContext) {
	var err error
	var req antennas.AddAntennaRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := utils.BuildBaseResp(err)
		c.JSON(consts.StatusOK, antennas.AddAntennaResponse{
			Code: resp.StatusCode,
			Msg:  resp.StatusMsg,
		})
		return
	}

	err = service.NewAntennaService(ctx, c).AddAntenna(&req)

	resp := utils.BuildBaseResp(err)
	c.JSON(consts.StatusOK, antennas.AddAntennaResponse{
		Code: resp.StatusCode,
		Msg:  resp.StatusMsg,
	})
}

// UpdateAntennaById .
// @router /antennas/updateAntennaById [POST]
func UpdateAntennaById(ctx context.Context, c *app.RequestContext) {
	var err error
	var req antennas.UpdateAntennaByIdRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := utils.BuildBaseResp(err)
		c.JSON(consts.StatusOK, antennas.UpdateAntennaByIdResponse{
			Code: resp.StatusCode,
			Msg:  resp.StatusMsg,
		})
		return
	}

	err = service.NewAntennaService(ctx, c).UpdateAntennaById(&req)

	resp := utils.BuildBaseResp(err)
	c.JSON(consts.StatusOK, antennas.UpdateAntennaByIdResponse{
		Code: resp.StatusCode,
		Msg:  resp.StatusMsg,
	})
}

// DeleteAntennaById .
// @router /antennas/deleteAntennaById [DELETE]
func DeleteAntennaById(ctx context.Context, c *app.RequestContext) {
	var err error
	var req antennas.DeleteAntennaByIdRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := utils.BuildBaseResp(err)
		c.JSON(consts.StatusOK, antennas.DeleteAntennaByIdResponse{
			Code: resp.StatusCode,
			Msg:  resp.StatusMsg,
		})
		return
	}

	err = service.NewAntennaService(ctx, c).DeleteAntennaById(&req)

	resp := utils.BuildBaseResp(err)
	c.JSON(consts.StatusOK, antennas.DeleteAntennaByIdResponse{
		Code: resp.StatusCode,
		Msg:  resp.StatusMsg,
	})
}
